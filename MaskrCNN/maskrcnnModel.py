# -*- coding: utf-8 -*-
"""instance-segmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b3TwHdeWAgmZ7n1eOFbzVw1T0oZvC9U6
"""

import torch
import torchvision

# We will get mask-rcnn model for this video
model = torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=True)
model.eval()

model = model.cuda() # I forgot to change to GPU, coment this line if no GPU

COCO_INSTANCE_CATEGORY_NAMES = [
    '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',
    'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'N/A', 'stop sign',
    'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
    'elephant', 'bear', 'zebra', 'giraffe', 'N/A', 'backpack', 'umbrella', 'N/A', 'N/A',
    'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
    'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',
    'bottle', 'N/A', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl',
    'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
    'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'N/A', 'dining table',
    'N/A', 'N/A', 'toilet', 'N/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
    'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'N/A', 'book',
    'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'
]
# I will link the notebook in the description
# You can copy the class names from the description
# or the notebook
len(COCO_INSTANCE_CATEGORY_NAMES) # 91 classes including background

from PIL import Image
from torchvision import transforms as T
import numpy as np
import requests
from io import BytesIO
# the io and requests libraries are just for loading images from URLS

def get_prediction(img_path, threshold=0.5, url=False):
  img = img_path # This is for local images
  transform = T.Compose([T.ToTensor()]) # Turn the image into a torch.tensor
  img = transform(img)
  img = img.cuda() # Only if GPU, otherwise comment this line
  pred = model([img]) # Send the image to the model. This runs on CPU, so it's going to take time
  # Let's change it to GPU
  # pred = pred.cpu() # We will just send predictions back to CPU
  # Now we need to extract the bounding boxes and masks
  pred_score = list(pred[0]['scores'].detach().cpu().numpy())
  flag = False
  if len(pred_score) != 0:
    flag = True

    filtered_scores = [x for x in pred_score if x > threshold]
    if len(filtered_scores) > 0:
      pred_t = pred_score.index(filtered_scores[-1])
      masks = (pred[0]['masks'] > 0.5).squeeze().detach().cpu().numpy()
      pred_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(pred[0]['labels'].cpu().numpy())]
      pred_boxes = [[(i[0], i[1]), (i[2], i[3])] for i in list(pred[0]['boxes'].detach().cpu().numpy())]
      masks = masks[:pred_t+1]
      pred_boxes = pred_boxes[:pred_t+1]
      pred_class = pred_class[:pred_t+1]
    else:
      masks, pred_boxes, pred_class = [], [], []

  else:
    masks, pred_boxes, pred_class = [], [], []
  
  return masks, pred_boxes, pred_class, flag

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
# %config InlineBackend.figure_format = 'retina' # For high res images

import cv2 # opencv

from urllib.request import urlopen
def url_to_image(url, readFlag=cv2.IMREAD_COLOR):
  resp = urlopen(url) # We want to convert URL to cv2 image here, so we can draw the mask and bounding boxes
  image = np.asarray(bytearray(resp.read()), dtype="uint8")
  image = cv2.imdecode(image, readFlag)
  return image

import random

def random_color_masks(image):
  # I will copy a list of colors here
  colors = [[0, 255, 0],[0, 0, 255],[255, 0, 0],[0, 255, 255],[255, 255, 0],[255, 0, 255],[80, 70, 180], [250, 80, 190],[245, 145, 50],[70, 150, 250],[50, 190, 190]]
  r = np.zeros_like(image).astype(np.uint8)
  g = np.zeros_like(image).astype(np.uint8)
  b = np.zeros_like(image).astype(np.uint8)
  r[image==1], g[image==1], b[image==1] = colors[random.randrange(0, 10)]
  colored_mask = np.stack([r,g,b], axis=2)
  return colored_mask

def instance_segmentation(img_path, threshold=0.5, rect_th=3, text_size=0.5, text_th=0.5, url=False):
    masks, boxes, pred_cls, flag = get_prediction(img_path, threshold=threshold, url=url)
    img = img_path
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # For working with RGB images instead of BGR
    if flag == True:
        for i in range(len(masks)):
            print(len(masks))
            rgb_mask = random_color_masks(masks[i])
            img = cv2.addWeighted(img, 1, rgb_mask, 0.5, 0)
            pt1 = tuple(int(x) for x in boxes[i][0])
            pt2 = tuple(int(x) for x in boxes[i][1])
            cv2.rectangle(img, pt1, pt2, color=(0, 255, 0), thickness=rect_th)
            cv2.putText(img, pred_cls[i], pt1, cv2.FONT_HERSHEY_SIMPLEX, text_size, (0, 255, 0), thickness=text_th)
    else:
        masks, pred_boxes, pred_class = [], [], []
    if len(masks) > 0:
        return img, pred_cls, masks[0], flag
    else:
        return img, pred_cls, [], flag

import cv2

cap = cv2.VideoCapture(0)
prev_ticks = cv2.getTickCount()  # Get the initial tick count
while True:
    ret, frame = cap.read()
    current_ticks = cv2.getTickCount()  # Get the current tick count
    elapsed_time = (current_ticks - prev_ticks) / cv2.getTickFrequency()  # Calculate elapsed time in seconds
    prev_ticks = current_ticks  # Update the previous tick count

    if not ret:
        break


    img, pred_classes, masks,flag = instance_segmentation(frame, rect_th=5, text_th=4)
    if flag==False:
        cv2.imshow('Webcam', frame)
    else:
        cv2.imshow('Webcam', img)
    print(elapsed_time)
            
    

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()





# AND HERE WE HAVE our segmented image.
# We have amsks, bounding boxes, and the class label for each item
# the masks are very accurate
# Thats it for this one, see you next time

